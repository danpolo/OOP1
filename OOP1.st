Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'getters' stamp: 'IS 1/25/2024 14:27'!coef	^coef! !!Monom methodsFor: 'getters' stamp: 'IS 1/25/2024 14:27'!exp	^exp! !!Monom methodsFor: 'setters' stamp: 'IS 1/25/2024 15:50'!coef: anInteger	(anInteger isKindOf: Integer)	ifTrue:		[coef := anInteger]	ifFalse:		[self error: 'invalid input']! !!Monom methodsFor: 'setters' stamp: 'IS 1/26/2024 16:39'!derivative	|newMonom|	newMonom := Monom new.	(self exp ~= 0)	ifTrue: 			[newMonom exp: ((self exp) - 1).		newMonom coef: (self coef * self exp)].	^newMonom! !!Monom methodsFor: 'setters' stamp: 'IS 1/25/2024 15:50'!exp: anInteger	((anInteger isKindOf: Integer) and: [anInteger >= 0])	ifTrue: 		[exp := anInteger]	ifFalse:		[self error: 'invalid input']! !!Monom methodsFor: 'initialize-release' stamp: 'DP 1/23/2024 18:34'!initialize 	exp := 0.	coef := 0.! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'adding' stamp: 'IS 1/26/2024 16:25'!addMonom: aMonom	|checkExp found newCoef|	(aMonom isKindOf: Monom) 	ifFalse: 		[self error: 'invalid input'].	checkExp := aMonom exp.	(aMonom coef = 0) ifTrue: [^self].	found := monoms select: [:ele | (ele exp) = checkExp].	(found isEmpty)		ifTrue:			[monoms add: aMonom]		ifFalse:			[newCoef := found first coef + (aMonom coef). (newCoef = 0) 																ifTrue:																	[monoms remove: (found first)]																ifFalse:																 	[found first coef: newCoef]].																																																																																				! !!Polynom methodsFor: 'adding' stamp: 'IS 1/26/2024 16:16'!asDictionary	|dict|	dict := Dictionary new.	monoms do: [:ele | dict at: ((ele value) exp) put: ((ele value) coef)].	^(dict)! !!Polynom methodsFor: 'adding' stamp: 'IS 1/26/2024 16:15'!multiplyByMonom: aMonom	|expTemp coefTemp|	(aMonom isKindOf: Monom)		ifFalse:			[self error: 'Invalid input'].	expTemp := aMonom exp.	coefTemp := aMonom coef.	(coefTemp = 0) 		ifTrue: 			[monoms removeAll. ^self].	monoms do: [:ele | (ele value) exp: ((ele value) exp) + expTemp. (ele value) coef: ((ele value) coef) * coefTemp]! !!Polynom methodsFor: 'loops' stamp: 'IS 1/26/2024 16:39'!derivative	|polyTemp|	polyTemp := Polynom new.	monoms do: [:ele | | x | x := ((ele value) derivative). polyTemp addMonom: x].	^polyTemp! !!Polynom methodsFor: 'loops' stamp: 'IS 1/25/2024 20:16'!printer	monoms associationsDo: [:ele |  Transcript show: ele; space].	Transcript show: ''; cr.! !!Polynom methodsFor: 'initialize-release' stamp: 'IS 1/26/2024 14:47'!initialize	monoms := LinkedList new! !